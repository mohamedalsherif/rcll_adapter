"""autogenerated by genpy from rcll_adapter/ZoneInterface.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ZoneInterface(genpy.Message):
  _md5sum = "e474da21d1c597d5fff437117dca4bed"
  _type = "rcll_adapter/ZoneInterface"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 STATE_UNKNOWN = 0 # We did not detect it yet, but can't say no
uint8 STATE_NO = 1 		# We search everthing, there might be no MPS in the zone (or the skill can't find it)
uint8 STATE_YES = 2 	# We found the MPS and in the corresponding Position 3D interface are the possition 
uint8 STATE_MAYBE = 3 	# We found the MPS at a far possition, but not from close 
uint8 search_state 		# The state of the search of the actual zone.
uint32 tag_id 			# The ID of the tag, if set to -1 this means no TAG is known, e.g. MPS just found maybe (with laser-lines).
"""
  # Pseudo-constants
  STATE_UNKNOWN = 0
  STATE_NO = 1
  STATE_YES = 2
  STATE_MAYBE = 3

  __slots__ = ['search_state','tag_id']
  _slot_types = ['uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       search_state,tag_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ZoneInterface, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.search_state is None:
        self.search_state = 0
      if self.tag_id is None:
        self.tag_id = 0
    else:
      self.search_state = 0
      self.tag_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.search_state, _x.tag_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.search_state, _x.tag_id,) = _struct_BI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.search_state, _x.tag_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.search_state, _x.tag_id,) = _struct_BI.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI = struct.Struct("<BI")
