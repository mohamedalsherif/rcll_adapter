"""autogenerated by genpy from beginner_tutorials/TagVisionInterface.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TagVisionInterface(genpy.Message):
  _md5sum = "27685962faaef7abc4b9ef2846989f21"
  _type = "beginner_tutorials/TagVisionInterface"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[32] frame 	# Reference coordinate frame for the data.
int32 tags_visible 	# The number of currently visible tags
int32[16] tag_id 	# The IDs of the tags

"""
  __slots__ = ['frame','tags_visible','tag_id']
  _slot_types = ['string[32]','int32','int32[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame,tags_visible,tag_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TagVisionInterface, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']
      if self.tags_visible is None:
        self.tags_visible = 0
      if self.tag_id is None:
        self.tag_id = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    else:
      self.frame = ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']
      self.tags_visible = 0
      self.tag_id = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.frame:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_i.pack(self.tags_visible))
      buff.write(_struct_16i.pack(*self.tag_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      self.frame = []
      for i in range(0, 32):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.frame.append(val1)
      start = end
      end += 4
      (self.tags_visible,) = _struct_i.unpack(str[start:end])
      start = end
      end += 64
      self.tag_id = _struct_16i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.frame:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_struct_i.pack(self.tags_visible))
      buff.write(self.tag_id.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      self.frame = []
      for i in range(0, 32):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.frame.append(val1)
      start = end
      end += 4
      (self.tags_visible,) = _struct_i.unpack(str[start:end])
      start = end
      end += 64
      self.tag_id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_16i = struct.Struct("<16i")
